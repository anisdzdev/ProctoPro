#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');
const https = require('https');
const winston = require('winston');
const fs = require('fs');


const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const options = {
    key: fs.readFileSync(__dirname+'/key.pem'),
    cert: fs.readFileSync(__dirname+'/cert.pem')
};

let server;
if(process.env.REQUIRE_HTTPS === 'yes'){
    server = https.createServer(options,app);
}else{
    server = http.createServer(app);
}


server.listen(port, () => winston.info(`Listening on port ${port}...`));
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
